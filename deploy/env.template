#
# Configuración de los contenedores
#

# Plantilla base de fichero .env para configurar los contenedores
# que se lanzarán.
#
# Dependiendo de qué quieras lanzar, tendrás que incorporar unos
# ficheros .yml u otros. Además, hay un montón de variables de configuración.
# Algunas son imprescindibles, pero otras dependerá de si incorporas
# o no algunos .yml.
#
# Es preferible que definas todas las variables (que se necesiten) incluso
# aunque las quieras dejar vacías. Si no, la ejecución de Docker Compose
# generará avisos de variable no definida en cada invocación.
#
# Lo más cómodo es que copies el fichero y lo renombres a .env para que
# se utilice automáticamente. También puedes darle otro nombre y especificarlo
# con:
#
# docker-compose --env-file mifichero.env <resto de los comandos>
#
# Una última opción es que una vez que estés conforme "aplanes" todo y
# generes un docker-compose.yml autónomo que no requiera ninguno de los
# demás .yml ni el fichero .env. Esto te permite "llevartelo" donde te 
# parezca y usarlo sin necesidad de nada más (salvo las imágenes,
# obviamente). Para eso:
#
# docker-compose [--env-file mifichero.env] config
#
# Esto no lanza ningún contenedor, sino que aglutina todo y escribe por
# la salida estándar el resultado aglutinado. Puedes redirigirlo a donde
# te apetezca, claro:
#
# docker-compose [--env-file mifichero.env] config > docker-compose.deploy.yml
#

######################################
#
#     Variables de configuración
#
######################################


# Usuario del sistema con el que se lanzan los contenedores
# que puedan ser lanzados sin ser root.
#
# ¡CUIDADO! Hay que poner ids numérico. Si se pone el nombre
# se buscará ese nombre *en cada contenedor*. Si una imagen no
# define ese nombre, no se lanzará.
#
# No es necesario que las imágenes tengan el usuario definido.
# El único efecto es que si se entra en una de esas imágenes
# (ejecutando un shell, por ejemplo) se verá una indicación
# de que el usuario no tiene nombre en el prompt.
#
# Si no se especifica, se asume 1000:1000 (que es típicamente
# el primer usuario en Debian/Ubuntu)
#UID=1000
#GUID=1000
# TODO: esto no funciona, en realidad. La imagen de Apache
# requiere ser root para escuchar en el puerto 80 del contenedor
# y para crear los ficheros de log. Toca lanzarlo como root.
UID=0
GUID=0

#######
#
# Configuración de las imágenes usadas
#

# Repositorio de imágenes. Si se deja vacío se buscan las
# imágenes localmente. Si no, se pone delante el repositorio indicado.
# En ese caso, acabalo con una /
# TODO: esto *no* está probado...
#IMAGES_REGISTRY=docker.padaonegames.com/.../
IMAGES_REGISTRY=

# TAGS de las imágenes. Si no se establecen, se asume "latest".
#SERVER_TAG=...

#######
#
# Configuración de la red
#

# Por defecto *no* se publica el servidor hacia el exterior. Dependiendo
# del uso, querrás publicar un puerto en el anfitrión y engancharlo con el
# puerto de la aplicación web en el contenedor, o bien dejarlo "privado" y
# hacer que el acceso se realice a través de algún otro contenedor conectado
# a la red de Docker (típicamente Traefik). Según lo que quieras será importante
# una u otra configuración de las que aparecen a continuación.

# Puerto público (del anfitrión) en el que escucha la aplicación.
# *Solo se usa si se incluye externalport.yml*
# Si no, la única forma de acceder al servicio será a través de la
# red de Docker.
#PUBLIC_PORT=80

#
# Traefik
#

# Red de Docker a la que se conectará *únicamente* el servidor y
# que será la que indicará a Traefik para que se conecte a él. El
# contenedor de Traefik debería estar conectado aquí, por lo que
# deberá haber sido creada manualmente con antelación (con el comando
# docker network create).
#
# Esta variable solo se usa si se incluye traefik.yml
#TRAEFIK_NETWORK=devNet

# Nombre público del servidor con el que llegan los usuarios externos
# a él para conectarse.
# 
# *Solo se usa si se incluye traefik.yml* para añadir las etiquetas
# de Traefik para pedirle que redirija el tráfico que le llegue a ese
# nombre a nuestro contenedor.
# SERVER_PUBLIC_NAME=spice.padaonegames.com

# Identificador del servicio en Traefik. Sirve para asociar la regla de
# redirección del proxy inverso a un identificador. ¡¡DEBE SER ÚNICO!!
# Si dos servicios tienen el mismo identificador ¡no funcionará ninguno!
# Una forma de evitar colisiones es poner el nombre DNS público.
# *Solo se usa si se incluye traefik.yml*
#TRAEFIK_SERVICE_ID=spice

######################################
#
# Configuración de Compose.
#
######################################


# Nombre del "proyecto". Se usa como prefijo de todos los contenedores
# que se construyan en lugar de utilizar el nombre del directorio.
COMPOSE_PROJECT_NAME=spice


#
# Separador entre ficheros en COMPOSE_FILE, por si quieres usar uno distinto al :
# Mejor no lo toques, que rompes los ejemplos siguientes :-)
# 
#COMPOSE_PATH_SEPARATOR=;


#######
#
# Ficheros a mezclar. ¡El orden podría ser importante!
#

# Dejo varios ejemplos.

# Solo base.yml : servidor.
# No es muy útil porque no abre el acceso al servidor salvo que uses
# el nombre de la red que "decida crear" Docker Compose.
#COMPOSE_FILE=base.yml

# Servidor accesible en un puerto del anfitrión ($PUBLIC_PORT)
#COMPOSE_FILE=base.yml:externalport.yml

# Servidor accesibles con traefik con el nombre público $SERVER_PUBLIC_NAME
# a través de la red Docker (previamente creada) $TRAEFIK_NETWORK.
#COMPOSE_FILE=base.yml:externalnetwork.yml:traefik.yml

#
# Otras opciones
#

# Host con el demonio de Docker, si quieres que se lance en una máquina remota.
# Tendrás que tener las credenciales preconfiguradas...
#DOCKER_HOST=...

# Hay más en https://docs.docker.com/compose/reference/envvars/ pero
# no creo que las necesites :-)
